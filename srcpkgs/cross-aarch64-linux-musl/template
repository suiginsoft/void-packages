# Template build file for 'cross-aarch64-linux-musl'
#
_binutils_version=2.27
_gcc_version=4.9.4
_musl_version=1.1.15
_linux_version=3.18.25

_triplet=aarch64-linux-musl
_archflags="-march=armv8-a"
_sysroot="/usr/${_triplet}"

pkgname=cross-${_triplet}
version=0.21
revision=7
short_desc="Cross toolchain for ARM64 LE target (musl)"
maintainer="Juan RP <xtraeme@voidlinux.eu>"
homepage="http://www.voidlinux.eu"
license="GPL-3, GPL-2, MIT"
distfiles="
 http://ftp.gnu.org/pub/gnu/binutils/binutils-${_binutils_version}.tar.bz2
 http://ftp.gnu.org/pub/gnu/gcc/gcc-${_gcc_version}/gcc-${_gcc_version}.tar.bz2
 http://www.kernel.org/pub/linux/kernel/v3.x/linux-${_linux_version}.tar.xz
 http://www.musl-libc.org/releases/musl-${_musl_version}.tar.gz"
checksum="
 369737ce51587f92466041a97ab7d2358c6d9e1b6490b3940eb09fb0a9a6ac88
 6c11d292cd01b294f9f84c9a59c230d80e9e4a47e5c6355f046bb36d4f358092
 c649874e2856101df7cefe5fdad313ebb2282a939fc1e95cf02222327745ff92
 97e447c7ee2a7f613186ec54a93054fe15469fe34d7d323080f7ef38f5ecb0fa"

lib32disabled=yes
nocross=yes
nopie=yes
nodebug=yes
create_wrksrc=yes

only_for_archs="x86_64 x86_64-musl"
hostmakedepends="perl flex"
makedepends="zlib-devel gmp-devel mpfr-devel libmpc-devel"
nostrip_files="libgcc.a libgcov.a libgcc_eh.a"
depends="${pkgname}-libc-${version}_${revision}"

_apply_patch() {
	local args="$1" pname="$(basename $2)"

	if [ ! -f ".${pname}_done" ]; then
		patch -N $args -i $2
		touch .${pname}_done
	fi
}

_binutils_build() {
	[ -f ${wrksrc}/.binutils_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross binutils bootstrap\n"

	[ ! -d binutils-build ] && mkdir binutils-build
	cd binutils-build

	../binutils-${_binutils_version}/configure \
		--prefix=/usr --target=${_triplet} --with-sysroot=${_sysroot} \
		--disable-nls --disable-multilib --disable-werror \
		--disable-shared

	make configure-host && make ${makejobs}
	make install

	touch ${wrksrc}/.binutils_build_done
}

_gcc_bootstrap() {
	[ -f ${wrksrc}/.gcc_bootstrap_done ] && return 0

	cd ${wrksrc}/gcc-${_gcc_version}
	_apply_patch -p1 ${FILESDIR}/gcc-4.9.2-musl.diff
	_apply_patch -p0 ${FILESDIR}/libcpp-source_date_epoch.patch
	_apply_patch -p0 ${FILESDIR}/gcc-spec-env-r1.patch

	msg_normal "Building cross gcc bootstrap\n"

	[ ! -d ../gcc-bootstrap ] && mkdir ../gcc-bootstrap
	cd ../gcc-bootstrap

	CFLAGS="-O0 -g0" CXXFLAGS="-O0 -g0" \
		../gcc-${_gcc_version}/configure --prefix=/usr \
		--target=${_triplet} --with-sysroot=${_sysroot} --with-newlib \
		--enable-languages=c --with-newlib --disable-libssp --disable-nls \
		--disable-libquadmath --disable-threads --disable-decimal-float \
		--disable-shared --disable-libmudflap --disable-libgomp \
		--disable-libatomic --disable-symvers libat_cv_have_ifunc=no

	make ${makejobs}
	make install

	touch ${wrksrc}/.gcc_bootstrap_done
}

_linux_headers() {
	[ -f ${wrksrc}/.linux_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building Linux API headers\n"

	cd linux-${_linux_version}

	make ARCH=arm64 headers_check
	make ARCH=arm64 INSTALL_HDR_PATH=${_sysroot}/usr headers_install

	touch ${wrksrc}/.linux_build_done
}

_musl_build() {
	[ -f ${wrksrc}/.musl_build_done ] && return 0

	cd ${wrksrc}/musl-${_musl_version}
	msg_normal "Building cross musl libc\n"

	CC="${_triplet}-gcc" LD="${_triplet}-ld" AR="${_triplet}-ar" \
		AS="${_triplet}-as" RANLIB="${_triplet}-ranlib" \
		CFLAGS="-Os -pipe ${_archflags}" \
		./configure --prefix=/usr \

	make ${makejobs}
	make DESTDIR=${_sysroot} install

	touch ${wrksrc}/.musl_build_done
}

_gcc_build() {
	[ -f ${wrksrc}/.gcc_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross gcc final\n"

	[ ! -d gcc-build ] && mkdir gcc-build
	cd gcc-build

	../gcc-${_gcc_version}/configure \
		--target=${_triplet} --with-sysroot=${_sysroot} --prefix=/usr \
		--libexecdir=/usr/lib --enable-languages=c,c++,lto \
		--enable-lto --disable-libsanitizer \
		--disable-multilib --disable-nls --disable-libquadmath \
		--disable-libmudflap --enable-shared \
		--disable-symvers libat_cv_have_ifunc=no

	make ${makejobs}

	touch ${wrksrc}/.gcc_build_done
}

do_build() {
	# Ensure we use sane environment
	unset CC CXX CPP LD AS AR RANLIB OBJDUMP READELF NM
	unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS
	export CFLAGS="-Os -pipe" CXXFLAGS="-Os -pipe"

	for f in include lib libexec bin sbin; do
		if [ ! -d ${_sysroot}/usr/${f} ]; then
			mkdir -p ${_sysroot}/usr/${f}
		fi
		if [ ! -h ${_sysroot}/${f} ]; then
			ln -sfr ${_sysroot}/usr/${f} ${_sysroot}/${f}
		fi
	done

	_binutils_build
	_gcc_bootstrap
	_linux_headers
	_musl_build
	_gcc_build
}

do_install() {
	for f in include libexec bin sbin; do
		if [ ! -d ${DESTDIR}/${_sysroot}/usr/${f} ]; then
			mkdir -p ${DESTDIR}/${_sysroot}/usr/${f}
		fi
		if [ ! -h ${DESTDIR}/${_sysroot}/${f} ]; then
			ln -sfr ${DESTDIR}/${_sysroot}/usr/${f} \
				${DESTDIR}/${_sysroot}/${f}
		fi
	done
	mkdir -p ${DESTDIR}/${_sysroot}/usr/lib
	ln -sf lib ${DESTDIR}/${_sysroot}/usr/lib64
	ln -sf usr/lib ${DESTDIR}/${_sysroot}/lib64
	ln -sf usr/lib ${DESTDIR}/${_sysroot}/lib

	# install linux API headers
	cd ${wrksrc}/linux-${_linux_version}
	make ARCH=arm64 INSTALL_HDR_PATH=${DESTDIR}/${_sysroot}/usr headers_install
	rm -f $(find ${DESTDIR}/${_sysroot}/usr/include -name .install -or -name ..install.cmd)
	rm -rf ${DESTDIR}/${_sysroot}/usr/include/drm

	# install cross binutils
	cd ${wrksrc}/binutils-build
	make DESTDIR=${DESTDIR} install

	# install cross gcc
	cd ${wrksrc}/gcc-build
	make DESTDIR=${DESTDIR} install

	# install musl libc for target
	cd ${wrksrc}/musl-${_musl_version}
	make DESTDIR=${DESTDIR}/${_sysroot} install

	# Remove useless headers.
	rm -rf ${DESTDIR}/usr/lib/gcc/${_triplet}/*/include-fixed/ \
		${DESTDIR}/usr/lib/gcc/${_triplet}/*/include/stddef.h

	# Make ld-musl.so symlinks relative.
	ln -sf libc.so ${DESTDIR}/${_sysroot}/usr/lib/ld-musl-aarch64.so.1

	# Remove unnecessary stuff
	rm -f ${DESTDIR}/usr/lib*/libiberty.a
	rm -rf ${DESTDIR}/usr/share
	rm -rf ${DESTDIR}/${_sysroot}/{etc,var}
	rm -rf ${DESTDIR}/${_sysroot}/usr/{sbin,share,libexec}
	rm -f ${DESTDIR}/${_sysroot}/libexec
	rm -f ${DESTDIR}/${_sysroot}/lib/*.py
	rm -f ${DESTDIR}/${_sysroot}/sbin
}

cross-aarch64-linux-musl-libc_package() {
	short_desc+=" - libc files"
	nostrip=yes
	noshlibprovides=yes
	noverifyrdeps=yes
	pkg_install() {
		vmove ${_sysroot}
	}
}
