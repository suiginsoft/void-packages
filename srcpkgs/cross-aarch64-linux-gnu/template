# Template build file for 'cross-aarch64-linux-gnu'
#
_binutils_version=2.27
_gcc_version=4.9.4
_glibc_version=2.24
_linux_version=3.18.25

_triplet=aarch64-linux-gnu
_archflags="-march=armv8-a"
_sysroot="/usr/${_triplet}"

pkgname=cross-${_triplet}
version=0.21
revision=6
short_desc="GNU Cross toolchain for the ${_triplet} LE target (binutils/gcc/glibc)"
maintainer="Christian Neukirchen <chneukirchen@gmail.com>"
homepage="http://www.voidlinux.eu"
license="GPL-3, GPL-2, LGPL-2.1"
distfiles="
 ${GNU_SITE}/binutils/binutils-${_binutils_version}.tar.bz2
 ${GNU_SITE}/gcc/gcc-${_gcc_version}/gcc-${_gcc_version}.tar.bz2
 ${GNU_SITE}/glibc/glibc-${_glibc_version}.tar.xz
 ${KERNEL_SITE}/kernel/v3.x/linux-${_linux_version}.tar.xz"
checksum="
 369737ce51587f92466041a97ab7d2358c6d9e1b6490b3940eb09fb0a9a6ac88
 6c11d292cd01b294f9f84c9a59c230d80e9e4a47e5c6355f046bb36d4f358092
 99d4a3e8efd144d71488e478f62587578c0f4e1fa0b4eed47ee3d4975ebeb5d3
 c649874e2856101df7cefe5fdad313ebb2282a939fc1e95cf02222327745ff92"

lib32disabled=yes
nocross=yes
nopie=yes
create_wrksrc=yes
hostmakedepends="perl flex"
makedepends="zlib-devel gmp-devel mpfr-devel libmpc-devel"
depends="${pkgname}-libc-${version}_${revision}"
nostrip_files="libgcc.a libgcov.a libgcc_eh.a"
only_for_archs="x86_64"

_apply_patch() {
	local args="$1" pname="$(basename $2)"

	if [ ! -f ".${pname}_done" ]; then
		patch -N $args -i $2
		touch .${pname}_done
	fi
}

_linux_headers() {
	[ -f ${wrksrc}/.linux_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building Linux API headers for ARM\n"

	cd linux-${_linux_version}

	make ARCH=arm64 headers_check
	make ARCH=arm64 INSTALL_HDR_PATH=${_sysroot}/usr headers_install

	touch ${wrksrc}/.linux_build_done
}

_binutils_build() {
	[ -f ${wrksrc}/.binutils_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross binutils\n"
	[ ! -d binutils-build ] && mkdir binutils-build
	cd binutils-build

	../binutils-${_binutils_version}/configure \
		--prefix=/usr --target=${_triplet} \
		--with-sysroot=${_sysroot} --disable-nls --disable-shared \
		--disable-multilib --disable-werror --enable-gold

	make configure-host && make ${makejobs}
	make install

	touch ${wrksrc}/.binutils_build_done
}

_gcc_bootstrap() {
	[ -f ${wrksrc}/.gcc_bootstrap_done ] && return 0

	cd ${wrksrc}/gcc-${_gcc_version}
	_apply_patch -p0 ${FILESDIR}/libcpp-source_date_epoch.patch
	_apply_patch -p0 ${FILESDIR}/gcc-spec-env-r1.patch

	msg_normal "Building cross gcc bootstrap\n"

	[ ! -d ../gcc-bootstrap ] && mkdir ../gcc-bootstrap
	cd ../gcc-bootstrap

	../gcc-${_gcc_version}/configure --prefix=/usr \
		--target=${_triplet} --without-headers \
		--disable-nls --disable-shared --disable-libquadmath \
		--disable-decimal-float --disable-libgomp --disable-libmudflap \
		--disable-libssp --disable-libitm --disable-libatomic \
		--disable-threads --enable-languages=c \
		--disable-sjlj-exceptions --disable-multilib \
		--with-gnu-ld --with-gnu-as

	make ${makejobs}
	make install

	touch ${wrksrc}/.gcc_bootstrap_done
}

_glibc_headers() {
	[ -f ${wrksrc}/.glibc_headers_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross glibc headers\n"

	[ ! -d glibc-headers ] && mkdir glibc-headers
	cd glibc-headers

	echo "libc_cv_forced_unwind=yes" > config.cache
	echo "libc_cv_c_cleanup=yes" >> config.cache

	export CC="${_triplet}-gcc" LD="${_triplet}-ld" \
		AS="${_triplet}-as" CPP="${_triplet}-cpp" \
		NM="${_triplet}-nm"

	../glibc-${_glibc_version}/configure \
		--host=${_triplet} --prefix=/usr \
		--with-headers=${_sysroot}/usr/include \
		--config-cache \
		--enable-obsolete-rpc \
		--enable-kernel=2.6.27

	make -k install-headers cross_compiling=yes \
		install_root=${_sysroot}

	touch ${wrksrc}/.glibc_headers_done
}

_glibc_build() {
	[ -f ${wrksrc}/.glibc_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross glibc\n"

	[ ! -d glibc-build ] && mkdir glibc-build
	cd glibc-build

	echo "libc_cv_forced_unwind=yes" > config.cache
	echo "libc_cv_c_cleanup=yes" >> config.cache

	export CC="${_triplet}-gcc" LD="${_triplet}-ld" \
		AS="${_triplet}-as" CPP="${_triplet}-cpp" \
		NM="${_triplet}-nm"
	export CFLAGS="-Os -pipe -Wno-error ${_archflags}"

	../glibc-${_glibc_version}/configure \
		--host=${_triplet} --prefix=/usr --libdir=/usr/lib \
		--with-headers=${_sysroot}/usr/include \
		--config-cache \
		--enable-obsolete-rpc --disable-profile \
		--enable-kernel=2.6.27

	make ${makejobs}
	make install_root=${_sysroot} install

	touch ${wrksrc}/.glibc_build_done
}

_gcc_build() {
	[ -f ${wrksrc}/.gcc_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross gcc final\n"

	[ ! -d gcc-build ] && mkdir gcc-build
	cd gcc-build

	export CC="gcc" CFLAGS="-Os -pipe"
	unset LD AS

	# Make this link to target libs.
	if [ ! -f .sed_subst_done ]; then
		sed -e "s, /lib/, ${_sysroot}/lib/,g;s, /usr/lib/, ${_sysroot}/usr/lib/,g" \
			-i ${_sysroot}/lib/libc.so ${_sysroot}/lib/libpthread.so
		sed -e "s, /lib64/, ${_sysroot}/lib64/,g;s, /usr/lib/, ${_sysroot}/usr/lib/,g" \
			-i ${_sysroot}/lib/libc.so ${_sysroot}/lib/libpthread.so
		touch .sed_subst_done
	fi

	../gcc-${_gcc_version}/configure \
		--target=${_triplet} --prefix=/usr --libdir=/usr/lib \
		--with-sysroot=${_sysroot} --enable-languages=c,c++,lto \
		--with-gnu-as --with-gnu-ld --disable-multilib \
		--disable-nls --disable-sjlj-exceptions \
		--enable-threads=posix --enable-long-longx \
		--enable-shared --enable-linker-build-id \
		--enable-gnu-unique-object --enable-lto \
		--disable-libquadmath --disable-libatomic \
		--disable-libssp --disable-libmudflap \
		--disable-libsanitizer --disable-libcilkrts \
		--disable-libitm --disable-libvtv --disable-libstdcxx-pch \
		--enable-libstdcxx-time --with-linker-hash-style=gnu

	make ${makejobs}

	touch ${wrksrc}/.gcc_build_done
}

do_build() {
	unset LDFLAGS
	export CFLAGS="-Os" CXXFLAGS="-Os"

	for f in include lib libexec bin sbin; do
		if [ ! -d ${_sysroot}/usr/${f} ]; then
			mkdir -p ${_sysroot}/usr/${f}
		fi
		if [ ! -h ${_sysroot}/${f} ]; then
			ln -sfr ${_sysroot}/usr/${f} ${_sysroot}/${f}
		fi
	done

	_binutils_build
	_gcc_bootstrap
	_linux_headers
	_glibc_headers
	_glibc_build
	_gcc_build
}

do_install() {
	for f in include libexec bin sbin; do
		if [ ! -d ${DESTDIR}/${_sysroot}/usr/${f} ]; then
			mkdir -p ${DESTDIR}/${_sysroot}/usr/${f}
		fi
		if [ ! -h ${DESTDIR}/${_sysroot}/${f} ]; then
			ln -sfr ${DESTDIR}/${_sysroot}/usr/${f} \
				${DESTDIR}/${_sysroot}/${f}
		fi
	done
	mkdir -p ${DESTDIR}/${_sysroot}/usr/lib
	ln -sf lib ${DESTDIR}/${_sysroot}/usr/lib64
	ln -sf usr/lib ${DESTDIR}/${_sysroot}/lib64
	ln -sf usr/lib ${DESTDIR}/${_sysroot}/lib

	# install cross binutils
	cd ${wrksrc}/binutils-build
	make DESTDIR=${DESTDIR} install

	# install cross gcc
	cd ${wrksrc}/gcc-build
	make DESTDIR=${DESTDIR} install

	# install linux API headers for ARM64
	cd ${wrksrc}/linux-${_linux_version}
	make ARCH=arm64 INSTALL_HDR_PATH=${DESTDIR}/${_sysroot}/usr headers_install
	rm -f $(find ${DESTDIR}/${_sysroot}/usr/include -name .install -or -name ..install.cmd)
	rm -rf ${DESTDIR}/${_sysroot}/usr/include/drm

	# install glibc for target
	cd ${wrksrc}/glibc-build
	make install_root=${DESTDIR}/${_sysroot} install install-headers

	# Remove unnecessary stuff
	rm -f ${DESTDIR}/usr/lib*/libiberty.a
	rm -rf ${DESTDIR}/usr/share
	rm -rf ${DESTDIR}/${_sysroot}/{sbin,etc,var}
	rm -rf ${DESTDIR}/${_sysroot}/usr/{sbin,share,libexec}
	rm -rf ${DESTDIR}/${_sysroot}/usr/lib/gconv
	rm -f ${DESTDIR}/${_sysroot}/libexec
}

do_clean() {
	# Remove temporary stuff from masterdir
	rm -rf ${_sysroot}
	rm -f /usr/bin/${_triplet}*
	rm -rf /usr/lib/gcc/${_triplet}
	rm -rf /usr/libexec/gcc/${_triplet}
}

cross-aarch64-linux-gnu-libc_package() {
	short_desc+=" - glibc files"
	nostrip=yes
	noshlibprovides=yes
	noverifyrdeps=yes

	pkg_install() {
		vmove ${_sysroot}
	}
}
