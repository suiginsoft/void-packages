--- packages/ssl/ssl4pl.c.orig
+++ packages/ssl/ssl4pl.c
@@ -84,7 +84,6 @@
 static functor_t FUNCTOR_crl1;
 static functor_t FUNCTOR_revocations1;
 static functor_t FUNCTOR_revoked2;
-static functor_t FUNCTOR_session_key1;
 static functor_t FUNCTOR_master_key1;
 static functor_t FUNCTOR_session_id1;
 static functor_t FUNCTOR_client_random1;
@@ -1127,8 +1126,8 @@
 
   if (!PL_get_atom(method, &method_name))
      return PL_domain_error("ssl_method", method);
-  if (method_name == ATOM_sslv3)
-    ssl_method = SSLv3_method();
+  if (0)
+    ;
 #ifdef HAVE_SSLV2_METHOD
   else if (method_name == ATOM_sslv2)
     ssl_method = SSLv2_method();
@@ -1736,10 +1735,6 @@
 		      PL_INTEGER, (int)session->ssl_version))
     return FALSE;
 
-  if ( !add_key_string(list_t, FUNCTOR_session_key1,
-		       session->key_arg_length, session->key_arg) )
-    return FALSE;
-
   if ( !add_key_string(list_t, FUNCTOR_master_key1,
 		       session->master_key_length, session->master_key) )
     return FALSE;
@@ -1860,7 +1855,6 @@
   FUNCTOR_crl1            = PL_new_functor(PL_new_atom("crl"), 1);
   FUNCTOR_revoked2        = PL_new_functor(PL_new_atom("revoked"), 2);
   FUNCTOR_revocations1    = PL_new_functor(PL_new_atom("revocations"), 1);
-  FUNCTOR_session_key1    = PL_new_functor(PL_new_atom("session_key"), 1);
   FUNCTOR_master_key1     = PL_new_functor(PL_new_atom("master_key"), 1);
   FUNCTOR_session_id1     = PL_new_functor(PL_new_atom("session_id"), 1);
   FUNCTOR_client_random1  = PL_new_functor(PL_new_atom("client_random"), 1);
